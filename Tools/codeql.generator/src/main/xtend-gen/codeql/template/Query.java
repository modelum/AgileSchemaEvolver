package codeql.template;

import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class Query {
  public static CharSequence generateEntityDeleteOp(final String entityName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java");
    _builder.newLine();
    _builder.append("import utils");
    _builder.newLine();
    _builder.newLine();
    _builder.append("from Class entity, Location usageLoc, string message");
    _builder.newLine();
    _builder.append("where");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("entity.hasName(\"");
    _builder.append(entityName, "  ");
    _builder.append("\") and");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("isEntity(entity) and");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("(");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("(usageLoc = entity.getLocation() and");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("message = \"Entity \'\" + entity.getName() + \"\' is marked for deletion.\")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("or");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// Relaciones en otras entidades (@ManyToOne, @OneToOne, etc.)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("exists(Field field |");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("field.getType() = entity and hasJpaAssociationTo(field) ");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("and usageLoc = field.getLocation() ");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("and message = \"Field \'\" + field.getName() + \"\' references entity \'\" + entity.getName() + \"\' which is being deleted.\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("or");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// Queries ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("exists(Annotation nq, Annotation q |");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("(");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// Search namedQuery actives");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("(isQuery(q) and");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("isNamedQuery(nq) and");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("isEqual(nq.getValue(\"name\"), q.getValue(\"name\")) and");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("usesOldEntity(nq.getValue(\"query\"), entity) and");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("usageLoc = q.getTarget().getLocation() and");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("message = \"Named query uses entity \'\" + entity.getName() + \"\' which is marked for deletion.\")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("or");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// Search queries");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("(isQuery(q) and");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("usesOldEntity(q.getValue(\"value\"), entity) and");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("usageLoc = q.getTarget().getLocation() and");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("message = \"Query uses entity \'\" + entity.getName() + \"\' which is marked for deletion.\")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("or");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// Search createQuery");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("exists(MethodCall call |");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("isCreateQuery(call) and");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("exists(StringLiteral queryLiteral |");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("queryLiteral = call.getArgument(0) and");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("usesOldEntity(queryLiteral, entity)");
    _builder.newLine();
    _builder.append("          ");
    _builder.append(") and");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("usageLoc = call.getLocation() and");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("message = \"Call to createQuery uses entity \'\" + entity.getName() + \"\' which is marked for deletion.\"");
    _builder.newLine();
    _builder.append("        ");
    _builder.append(")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("or");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// Search createNamedQuery");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("exists(MethodCall call |");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("isCreateNamedQuery(call) and");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("exists(StringLiteral nameArg |");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("nameArg = call.getArgument(0) and");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("isNamedQuery(nq) and");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("\"\\\"\" + nameArg.getValue() + \"\\\"\" = nq.getValue(\"name\").toString() and");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("usesOldEntity(nq.getValue(\"query\"), entity)");
    _builder.newLine();
    _builder.append("          ");
    _builder.append(") and");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("usageLoc = call.getLocation() and");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("message = \"Call to createNamedQuery uses entity \'\" + entity.getName() + \"\' which is marked for deletion.\"");
    _builder.newLine();
    _builder.append("        ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("      ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("    ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("  ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("select usageLoc, message");
    _builder.newLine();
    return _builder;
  }

  public static CharSequence generateEntityRenameOp(final String oldEntityName, final String newEntityName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java");
    _builder.newLine();
    _builder.append("import utils");
    _builder.newLine();
    _builder.newLine();
    _builder.append("from Class oldEntity, Location usageLoc, string message, string newName");
    _builder.newLine();
    _builder.append("where");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("oldEntity.hasName(\"");
    _builder.append(oldEntityName, "  ");
    _builder.append("\") and // Last entity name");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("isEntity(oldEntity) and");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("newName = \"");
    _builder.append(newEntityName, "  ");
    _builder.append("\" and");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("(");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("(usageLoc = oldEntity.getLocation() and");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("message = \"Entity \'\" + oldEntity.getName() + \"\' will be renamed to \'\" + newName + \"\'.\")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("or");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// Field references in other entities");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("exists(Field field |");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("field.getType().getName() = oldEntity.getName() and hasJpaAssociationTo(field) and");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("usageLoc = field.getLocation() and");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("message =");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\"Field \'\" + field.getName() + \"\' references old entity name \'\" + oldEntity.getName() +");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("\"\' which will be renamed to \'\" + newName + \"\'.\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("or");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// JPQL queries");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("exists(Annotation nq, Annotation q |");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("(");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// Search namedQuery actives");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("(isQuery(q) and");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("isNamedQuery(nq) and");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("isEqual(nq.getValue(\"name\"), q.getValue(\"name\")) and");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("usesOldEntity(nq.getValue(\"query\"), oldEntity) and");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("usageLoc = q.getTarget().getLocation() and");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("message = \"Named query uses old entity name \'\" + oldEntity.getName() + \"\' which will be renamed to \'\" + newName + \"\'.\")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("or");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// Search queries");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("(isQuery(q) and");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("usesOldEntity(q.getValue(\"value\"), oldEntity) and");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("usageLoc = q.getTarget().getLocation() and");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("message = \"Query uses old entity name \'\" + oldEntity.getName() + \"\' which will be renamed to \'\" + newName + \"\'.\")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("or");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// Search createQuery");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("exists(MethodCall call |");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("isCreateQuery(call) and");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("exists(StringLiteral queryLiteral |");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("queryLiteral = call.getArgument(0) and");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("usesOldEntity(queryLiteral, oldEntity)");
    _builder.newLine();
    _builder.append("          ");
    _builder.append(") and");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("usageLoc = call.getLocation() and");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("message =");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("\"Call to createQuery uses old entity name \'\" + oldEntity.getName() +");
    _builder.newLine();
    _builder.append("              ");
    _builder.append("\"\' which will be renamed to \'\" + newName + \"\'.\"");
    _builder.newLine();
    _builder.append("        ");
    _builder.append(")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("or");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// Search createNamedQuery");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("exists(MethodCall call |");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("isCreateNamedQuery(call) and");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("exists(StringLiteral nameArg |");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("nameArg = call.getArgument(0) and");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("isNamedQuery(nq) and");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("\"\\\"\" + nameArg.getValue() + \"\\\"\" = nq.getValue(\"name\").toString() and");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("usesOldEntity(nq.getValue(\"query\"), oldEntity)");
    _builder.newLine();
    _builder.append("          ");
    _builder.append(") and");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("usageLoc = call.getLocation() and");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("message = \"Call to createNamedQuery uses old entity name \'\" + oldEntity.getName() + \"\' which will be renamed to \'\" + newName + \"\'.\"");
    _builder.newLine();
    _builder.append("        ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("      ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("    ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("  ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("select usageLoc, message");
    _builder.newLine();
    return _builder;
  }

  public static CharSequence generateFeatureRenameOp(final String entityName, final String featureOldName, final String featureNewName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java");
    _builder.newLine();
    _builder.append("import utils");
    _builder.newLine();
    _builder.newLine();
    _builder.append("from");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("Class entity, Field featureField, Location usageLoc, string oldName, string newName,");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("string message");
    _builder.newLine();
    _builder.append("where");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("isEntity(entity) and");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("entity.hasName(\"");
    _builder.append(entityName, "  ");
    _builder.append("\") and // Name entity with the field");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("featureField = entity.getAField() and");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("featureField.hasName(\"");
    _builder.append(featureOldName, "  ");
    _builder.append("\") and // Last field name");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("oldName = featureField.getName() and");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("newName = \"");
    _builder.append(featureNewName, "  ");
    _builder.append("\" and ");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("(");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// the field will be renamed");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("(usageLoc = featureField.getLocation() and");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("message = \"Feature \'\" + oldName + \"\' in entity \'\" + entity.getName() + \"\' will be renamed to \'\" + newName + \"\'.\")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("or");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// use the field in embedded classes");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("exists(Class embeddedClass, Field embeddedField, Field containerField |");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("isEmbeddable(embeddedClass) and");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("embeddedField = embeddedClass.getAField() and");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("embeddedField.getName() = oldName and");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("containerField.getType() = embeddedClass and");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("exists(Annotation embedded |");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("embedded = containerField.getAnAnnotation() and");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("embedded.getType().hasQualifiedName(\"jakarta.persistence\", \"Embedded\")");
    _builder.newLine();
    _builder.append("      ");
    _builder.append(") and");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("usageLoc = embeddedField.getLocation() and");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("message = \"Embedded field \'\" + oldName + \"\' matches feature \'\" + oldName + \"\' which will be renamed to \'\" + newName + \"\'.\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append(")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("or");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// getters y setters");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("exists(Method method |");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("(isGetter(method, featureField) or isSetter(method, featureField)) and");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("usageLoc = method.getLocation() and");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("message = \"Method \'\" + method.getName() + \"\' accesses feature \'\" + oldName + \"\' which will be renamed to \'\" + newName + \"\'.\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append(")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("or");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// direct access to the feature");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("exists(FieldAccess access |");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("access.getField() = featureField and");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("usageLoc = access.getLocation() and");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("message = \"Direct access to feature \'\" + oldName + \"\' which will be renamed to \'\" + newName + \"\'.\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append(")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("or");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// query annotations");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("exists(Annotation nq, Annotation q |");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("(");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// NamedQuery");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("(isQuery(q) and");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("isNamedQuery(nq) and");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("isEqual(nq.getValue(\"name\"), q.getValue(\"name\")) and");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("usesField(nq.getValue(\"query\"), featureField) and");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("usageLoc = q.getLocation() and");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("message = \"Named query uses feature \'\" + oldName + \"\' which will be renamed to \'\" + newName + \"\'.\")");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("or");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// Query");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("(isQuery(q) and");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("usesField(q.getValue(\"value\"), featureField) and");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("usageLoc = q.getLocation() and");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("message = \"Query uses feature \'\" + oldName + \"\' which will be renamed to \'\" + newName + \"\'.\")");
    _builder.newLine();
    _builder.append("      ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("    ");
    _builder.append(")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("or");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// createQuery y createNamedQuery");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("exists(MethodCall call |");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("(");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("(isCreateQuery(call) and");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("exists(StringLiteral queryLiteral |");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("queryLiteral = call.getArgument(0) and");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("usesField(queryLiteral, featureField)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("))");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("or");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("(isCreateNamedQuery(call) and");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("exists(StringLiteral nameArg, Annotation nq2 |");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("nameArg = call.getArgument(0) and");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("isNamedQuery(nq2) and");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("\"\\\"\" + nameArg.getValue() + \"\\\"\" = nq2.getValue(\"name\").toString() and");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("usesField(nq2.getValue(\"query\"), featureField)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("))");
    _builder.newLine();
    _builder.append("      ");
    _builder.append(") and");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("usageLoc = call.getLocation() and");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("message = \"Query uses feature \'\" + oldName + \"\' which will be renamed to \'\" + newName + \"\'.\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("  ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("select usageLoc, message");
    _builder.newLine();
    return _builder;
  }

  public static CharSequence generateFeatureDeleteOp(final String entityName, final String featureName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java");
    _builder.newLine();
    _builder.append("import utils");
    _builder.newLine();
    _builder.newLine();
    _builder.append("from Class entity, Field attributeField, Location usageLoc, string message");
    _builder.newLine();
    _builder.append("where");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("isEntity(entity) and");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("entity.hasName(\"");
    _builder.append(entityName, "  ");
    _builder.append("\") and ");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("attributeField = entity.getAField() and");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("attributeField.hasName(\"");
    _builder.append(featureName, "  ");
    _builder.append("\") and // Last field name");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("(");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// the field will be renamed");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("(usageLoc = attributeField.getLocation() and");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("message = \"Attribute \'\" + attributeField.getName() + \"\' in entity \'\" + entity.getName() + \"\' will be deleted.\")");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("or");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// use the field in embedded classes");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("exists(Class embeddedClass, Field embeddedField, Field containerField |");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("isEmbeddable(embeddedClass) and");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("embeddedField = embeddedClass.getAField() and");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("embeddedField.getName() = attributeField.getName() and");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("containerField.getType() = embeddedClass and");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("exists(Annotation embedded |");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("embedded = containerField.getAnAnnotation() and");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("embedded.getType().hasQualifiedName(\"jakarta.persistence\", \"Embedded\")");
    _builder.newLine();
    _builder.append("      ");
    _builder.append(") and");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("usageLoc = embeddedField.getLocation() and");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("message = \"Embedded field \'\" + embeddedField.getName() + \"\' matches attribute \'\" + attributeField.getName() + \"\' which will be deleted.\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append(")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("or");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// getters y setters");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("exists(Method method |");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("(isGetter(method, attributeField) or isSetter(method, attributeField)) and");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("usageLoc = method.getLocation() and");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("message = \"Method \'\" + method.getName() + \"\' accesses attribute \'\" + attributeField.getName() + \"\' which will be deleted.\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append(")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("or");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// direct access to the attribute");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("exists(FieldAccess access |");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("access.getField() = attributeField and");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("usageLoc = access.getLocation() and");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("message = \"Direct access to attribute \'\" + attributeField.getName() + \"\' which will be deleted.\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append(")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("or");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// query annotations");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("exists(Annotation nq, Annotation q |");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("(");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// Named queries");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("(isQuery(q) and");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("isNamedQuery(nq) and");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("isEqual(nq.getValue(\"name\"), q.getValue(\"name\")) and");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("usesField(nq.getValue(\"query\"), attributeField) and");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("usageLoc = q.getTarget().getLocation() and");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("message = \"Named query uses attribute \'\" + attributeField.getName() + \"\' which will be deleted.\")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("or");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// Regular queries");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("(isQuery(q) and usesField(q.getValue(\"value\"), attributeField)) and");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("usageLoc = q.getTarget().getLocation() and");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("message = \"Query uses attribute \'\" + attributeField.getName() + \"\' which will be deleted.\"");
    _builder.newLine();
    _builder.append("      ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("    ");
    _builder.append(")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("or");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// createQuery y createNamedQuery");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("exists(MethodCall call |");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("(");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// agrupa las dos alternativas");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("(isCreateQuery(call) and");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("exists(StringLiteral queryLiteral |");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("queryLiteral = call.getArgument(0) and");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("usesField(queryLiteral, attributeField)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("))");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("or");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("(isCreateNamedQuery(call) and");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("exists(StringLiteral nameArg, Annotation nq |");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("nameArg = call.getArgument(0) and");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("isNamedQuery(nq) and");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("\"\\\"\" + nameArg.getValue() + \"\\\"\" = nq.getValue(\"name\").toString() and");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("usesField(nq.getValue(\"query\"), attributeField)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("))");
    _builder.newLine();
    _builder.append("      ");
    _builder.append(") and");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("usageLoc = call.getLocation() and");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("message = \"Query uses attribute \'\" + attributeField.getName() + \"\' which will be deleted.\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("  ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("select usageLoc, message");
    _builder.newLine();
    return _builder;
  }

  public static CharSequence generateAttributeCastOp(final String entityName, final String fieldName, final String newFieldType) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java");
    _builder.newLine();
    _builder.append("import utils");
    _builder.newLine();
    _builder.newLine();
    _builder.append("from");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("Class entity, Field attributeField, Location usageLoc, string message, string oldType,");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("string newType");
    _builder.newLine();
    _builder.append("where");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("isEntity(entity) and");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("entity.hasName(\"");
    _builder.append(entityName, "  ");
    _builder.append("\") and ");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("attributeField = entity.getAField() and");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("attributeField.hasName(\"");
    _builder.append(fieldName, "  ");
    _builder.append("\") and ");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("oldType = attributeField.getType().getName() and");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("newType = \"");
    _builder.append(newFieldType, "  ");
    _builder.append("\" and // New type to replace the old one");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("(");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// the attribute will be casted");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("(usageLoc = attributeField.getLocation() and");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("message = \"Attribute \'\" + attributeField.getName() + \"\' in entity \'\" + entity.getName() + \"\' will change type from \'\" + oldType + \"\' to \'\" + newType + \"\'.\")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("or");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// getters y setters");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("exists(Method method |");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("(isGetter(method, attributeField) or isSetter(method, attributeField)) and");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("usageLoc = method.getLocation() and");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("message = \"Method \'\" + method.getName() + \"\' uses attribute \'\" + attributeField.getName() + \"\' with type \'\" + oldType + \"\' which will be changed to \'\" + newType + \"\'.\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append(")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("or");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// direct access to the attribute");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("exists(Expr expr |");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("usesFieldWithTypeDependency(expr, attributeField) and");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("usageLoc = expr.getLocation() and");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("message = \"Code depends on attribute \'\" + attributeField.getName() + \"\' having type \'\" + oldType + \"\' which will be changed to \'\" + newType + \"\'.\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append(")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("or");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// variable declarations with used attribute");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("exists(LocalVariableDeclExpr varDecl |");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("exists(FieldAccess access |");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("access.getField() = attributeField and");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("varDecl.getInit() = access and");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("varDecl.getType().getName() = oldType");
    _builder.newLine();
    _builder.append("      ");
    _builder.append(") and");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("usageLoc = varDecl.getLocation() and");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("message = \"Variable declaration uses attribute \'\" + attributeField.getName() + \"\' with type \'\" + oldType + \"\' which will be changed to \'\" + newType + \"\'.\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append(")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("or");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// 5. Field is passed to a method expecting the specific type");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("exists(MethodCall call, FieldAccess access |");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("access.getField() = attributeField and");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("call.getAnArgument() = access and");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("exists(int i |");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("call.getArgument(i) = access and");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("call.getMethod().getParameterType(i).getName() = oldType");
    _builder.newLine();
    _builder.append("      ");
    _builder.append(") and");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("usageLoc = call.getLocation() and");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("message = \"Method call passes attribute \'\" + attributeField.getName() + \"\' of type \'\" + oldType + \"\' which will be changed to \'\" + newType + \"\'.\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("  ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("select usageLoc, message");
    _builder.newLine();
    return _builder;
  }

  public static CharSequence generateAttributePromoteOp(final String entityName, final String newKeyName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java");
    _builder.newLine();
    _builder.append("import utils");
    _builder.newLine();
    _builder.newLine();
    _builder.append("from Class entity, Field existingIdField, Location usageLoc, string message, string newIdFieldName");
    _builder.newLine();
    _builder.append("where");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("isEntity(entity) and ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("entity.hasName(\"");
    _builder.append(entityName, "  ");
    _builder.append("\") and ");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("existingIdField = entity.getAField() and");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("// field with a @Id annotation");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exists(Annotation idAnnotation |");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("idAnnotation = existingIdField.getAnAnnotation() and");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("idAnnotation.getType().hasQualifiedName(\"jakarta.persistence\", \"Id\")");
    _builder.newLine();
    _builder.append("  ");
    _builder.append(") and");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("// Nombre del nuevo campo que será parte de la clave compuesta");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("newIdFieldName = \"");
    _builder.append(newKeyName, "  ");
    _builder.append("\" and");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("(");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("(usageLoc = existingIdField.getLocation() and");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("message = \"Field \'\" + existingIdField.getName() + \"\' will become part of composite key. \" + \"A new @EmbeddedId class will be created with this field and \'\" + newIdFieldName + \"\'.\")");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("or");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// @Id, @GeneratedValue annotations");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("exists(Annotation annotation |");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("annotation = existingIdField.getAnAnnotation() and");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("(");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("annotation.getType().hasQualifiedName(\"jakarta.persistence\", \"Id\") or");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("annotation.getType().hasQualifiedName(\"jakarta.persistence\", \"GeneratedValue\")");
    _builder.newLine();
    _builder.append("      ");
    _builder.append(") and");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("usageLoc = annotation.getLocation() and");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("message = \"Annotation \'\" + annotation.getType().getName() + \"\' will be removed as field becomes part of @EmbeddedId.\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("or");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// getters y setters");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("exists(Method method |");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("(isGetter(method, existingIdField) or isSetter(method, existingIdField)) and");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("usageLoc = method.getLocation() and");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("message = \"Method \'\" + method.getName() + \"\' will need to be updated to use the composite key class instead of \" +\"accessing \'\" + existingIdField.getName() + \"\' directly.\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("or");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// direct access to the field");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("exists(FieldAccess access |");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("access.getField() = existingIdField and");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("usageLoc = access.getLocation() and");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("message = \"Direct access to field \'\" + existingIdField.getName() + \"\' will need to be updated to use the composite key class.\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("or");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// query annotations");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("exists(Annotation nq, Annotation q |");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("(");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// Named queries");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("(isQuery(q) and");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("isNamedQuery(nq) and");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("isEqual(nq.getValue(\"name\"), q.getValue(\"name\")) and");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("usesField(nq.getValue(\"query\"), existingIdField) and");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("usageLoc = q.getLocation() and");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("message = \"Named query uses field \'\" + existingIdField.getName() + \"\' which will become part of a composite key. JPQL needs to be updated.\")");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("or");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// queries");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("(isQuery(q) and");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("usesField(q.getValue(\"value\"), existingIdField) and");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("usageLoc = q.getLocation() and");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("message = \"Query uses field \'\" + existingIdField.getName() + \"\' which will become part of a composite key. JPQL needs to be updated.\")");
    _builder.newLine();
    _builder.append("      ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("    ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("or");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// createQuery/createNamedQuery");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("exists(MethodCall call |");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("(");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("(isCreateQuery(call) and");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("exists(StringLiteral queryLiteral |");
    _builder.newLine();
    _builder.append("           ");
    _builder.append("queryLiteral = call.getArgument(0) and");
    _builder.newLine();
    _builder.append("           ");
    _builder.append("usesField(queryLiteral, existingIdField)");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("))");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("or");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("(isCreateNamedQuery(call) and");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("exists(StringLiteral nameArg, Annotation nq2 |");
    _builder.newLine();
    _builder.append("           ");
    _builder.append("nameArg = call.getArgument(0) and");
    _builder.newLine();
    _builder.append("           ");
    _builder.append("isNamedQuery(nq2) and");
    _builder.newLine();
    _builder.append("           ");
    _builder.append("\"\\\"\" + nameArg.getValue() + \"\\\"\" = nq2.getValue(\"name\").toString() and");
    _builder.newLine();
    _builder.append("           ");
    _builder.append("usesField(nq2.getValue(\"query\"), existingIdField)");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("))");
    _builder.newLine();
    _builder.append("      ");
    _builder.append(") and");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("usageLoc = call.getLocation() and");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("message = \"Query references field \'\" + existingIdField.getName() + \"\' which will become part of a composite key. JPQL needs to be updated.\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("or");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// foreign key references");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("exists(Field foreignField, Class foreignEntity |");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("isEntity(foreignEntity) and");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("foreignField = foreignEntity.getAField() and");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("(");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// joinColumn references ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("exists(Annotation joinColumn |");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("joinColumn = foreignField.getAnAnnotation() and");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("joinColumn.getType().hasQualifiedName(\"jakarta.persistence\", \"JoinColumn\") and");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("joinColumn.getValue(\"referencedColumnName\").toString().replaceAll(\"\\\"\", \"\") = existingIdField.getName()");
    _builder.newLine();
    _builder.append("        ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("or");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// OneToOne/ManyToOne references");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("(");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("foreignField.getType() = entity and");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("(");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("foreignField.hasAnnotation(\"jakarta.persistence\", \"ManyToOne\") or");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("foreignField.hasAnnotation(\"jakarta.persistence\", \"OneToOne\")");
    _builder.newLine();
    _builder.append("          ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("        ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("      ");
    _builder.append(") and");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("usageLoc = foreignField.getLocation() and");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("message = \"Field \'\" + foreignField.getName() + \"\' in entity \'\" + foreignEntity.getName() + ");
    _builder.newLine();
    _builder.append("               ");
    _builder.append("\"\' references \'\" + existingIdField.getName() + \"\' which will become part of a composite key. \" +");
    _builder.newLine();
    _builder.append("               ");
    _builder.append("\"Foreign key relationship must be updated to use the composite key.\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("  ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("select usageLoc, message");
    _builder.newLine();
    return _builder;
  }

  public static CharSequence generateRelationshipRenameOp(final String oldTableName, final String newTableName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java");
    _builder.newLine();
    _builder.append("import utils");
    _builder.newLine();
    _builder.newLine();
    _builder.append("from");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("Class sourceEntity, Field relationshipField, Location usageLoc, string message,");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("string oldTableName, string newTableName");
    _builder.newLine();
    _builder.append("where");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("isEntity(sourceEntity) and");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("oldTableName = \"");
    _builder.append(oldTableName, "  ");
    _builder.append("\" and");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("newTableName = \"");
    _builder.append(newTableName, "  ");
    _builder.append("\" and");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("// search a field with @JoinTable annotation");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("relationshipField = sourceEntity.getAField() and");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exists(Annotation joinTable |");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("hasJoinTableAnnotation(relationshipField) and");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("joinTable.getValue(\"name\").toString().replaceAll(\"\\\"\", \"\") = oldTableName");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("and");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("usageLoc = joinTable.getLocation() and");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("message =");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("\"Join table name will change from \'\" + oldTableName + \"\' to \'\" + newTableName + \"\'.\"");
    _builder.newLine();
    _builder.append("  ");
    _builder.append(") ");
    _builder.newLine();
    _builder.append("select usageLoc, message");
    _builder.newLine();
    return _builder;
  }

  public static CharSequence generateRelationshipDeleteOp(final String deleteTableName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java");
    _builder.newLine();
    _builder.append("import utils");
    _builder.newLine();
    _builder.newLine();
    _builder.append("from");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("Class sourceEntity, Field relationshipField, Location usageLoc, string message,");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("string relationshipTable");
    _builder.newLine();
    _builder.append("where");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("isEntity(sourceEntity) and  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("relationshipTable = \"");
    _builder.append(deleteTableName, "  ");
    _builder.append("\" and");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("relationshipField = getRelationshipField(sourceEntity, relationshipTable) and");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("(");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// the relationship field ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("(usageLoc = relationshipField.getLocation() and");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("message = \"Relationship field \'\" + relationshipField.getName() + \"\' with database table \'\" +");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("relationshipTable + \"\' will be deleted. \" + \"Remove all references to this relationship.\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("or");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// Mappings on the other side of the relationship (mappedBy)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("exists(Field mappedField, Annotation mappedBy |");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("mappedBy = mappedField.getAnAnnotation() and");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("isRelationshipField(mappedField) and");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("mappedBy.getValue(\"mappedBy\").toString().replaceAll(\"\\\"\", \"\") = relationshipField.getName() and");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("usageLoc = mappedBy.getLocation() and");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("message =");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\"Field \'\" + mappedField.getName() + \"\' references relationship \'\" +");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("relationshipField.getName() + \"\' which will be deleted. \" +");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("\"Remove this mapping configuration.\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("or    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// JPQL queries directly referencing the relationship (any side)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("exists(Annotation nq, Annotation q |");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("(");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// Named queries");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("(isQuery(q) and");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("isNamedQuery(nq) and");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("isEqual(nq.getValue(\"name\"), q.getValue(\"name\")) and");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("usesRelationship(nq.getValue(\"query\"), relationshipField) and");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("usageLoc = q.getLocation() and");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("message =");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("\"Named query references relationship table \'\" + relationshipTable +");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("\"\' which will be deleted. Update query to remove this reference.\"");
    _builder.newLine();
    _builder.append("        ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("or");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// Queries");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("(isQuery(q) and");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("usesRelationship(q.getValue(\"value\"), relationshipField) and");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("usageLoc = q.getLocation() and");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("message =");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("\"Query references relationship table \'\" + relationshipTable +");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("\"\' which will be deleted. Update query to remove this reference.\"");
    _builder.newLine();
    _builder.append("        ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("      ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("    ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("or");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// EntityManager createQuery/createNamedQuery");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("exists(MethodCall call |");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("(");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("(");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("isCreateQuery(call) and");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("exists(StringLiteral queryLiteral |");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("queryLiteral = call.getArgument(0) and");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("usesRelationship(queryLiteral, relationshipField)");
    _builder.newLine();
    _builder.append("          ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("        ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("or");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("(");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("isCreateNamedQuery(call) and");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("exists(StringLiteral nameArg, Annotation nq2 |");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("nameArg = call.getArgument(0) and");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("isNamedQuery(nq2) and");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("\"\\\"\" + nameArg.getValue() + \"\\\"\" = nq2.getValue(\"name\").toString() and");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("usesRelationship(nq2.getValue(\"query\"), relationshipField)");
    _builder.newLine();
    _builder.append("          ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("        ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("      ");
    _builder.append(") and");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("usageLoc = call.getLocation() and");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("message =");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("\"Query references relationship \'\" + relationshipField.getName() +");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("\"\' which will be deleted. Update or remove this query.\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("  ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("select usageLoc, message");
    _builder.newLine();
    return _builder;
  }
}
