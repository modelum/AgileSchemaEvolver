package codeql.template;

import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class Library {
  public static CharSequence generateUtils() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/** ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*Check if two expressions are equal ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("predicate isEqual(Expr a, Expr b) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("a.toString() = b.toString()");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Check if an annotation is a Query annotation");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("predicate isQuery(Annotation a) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("a.getType().hasQualifiedName(\"org.springframework.data.jpa.repository\", \"Query\")");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Check if an annotation is a NamedQuery annotation");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("predicate isNamedQuery(Annotation a) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("a.getType().hasQualifiedName(\"jakarta.persistence\", \"NamedQuery\")");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Check if an annotation is a Entity annotation");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("predicate isEntity(Class entity) {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exists(Annotation annotation | annotation = entity.getAnAnnotation() and");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("annotation.getType().hasQualifiedName(\"jakarta.persistence\", \"Entity\")");
    _builder.newLine();
    _builder.append("  ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Check if an annotation is a Embeddable annotation");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("predicate isEmbeddable(Class cls) {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exists(Annotation annotation | annotation = cls.getAnAnnotation() and");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("annotation.getType().hasQualifiedName(\"jakarta.persistence\", \"Embeddable\")");
    _builder.newLine();
    _builder.append("  ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Check if a field is used");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("predicate usesField(Expr queryValue, Field field) {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exists(Class entity |");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("entity = field.getDeclaringType() and");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("(");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("// Case 1: Reference using the fully qualified entity name");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("queryValue.toString().regexpMatch(\"(?i).*\\\\b\" + entity.getName() + \"\\\\s*\\\\.\\\\s*\" + field.getName() + \"\\\\b.*\")");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("or");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("// Case 2: Reference using an alias defined in the query");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("exists(string alias | ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// Look for patterns like \"FROM Entity alias\" or \"JOIN Entity alias\"");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("queryValue.toString().regexpMatch(\"(?i).*(FROM|JOIN)\\\\s+\" + entity.getName() + \"\\\\s+([a-zA-Z0-9_]+).*\") and");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// Capture the alias");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("alias = queryValue.toString().regexpCapture(\"(?i).*(FROM|JOIN)\\\\s+\" + entity.getName() + \"\\\\s+([a-zA-Z0-9_]+).*\", 2) and");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// Match usage of the alias with the field");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("queryValue.toString().regexpMatch(\"(?i).*\\\\b\" + alias + \"\\\\s*\\\\.\\\\s*\" + field.getName() + \"\\\\b.*\")");
    _builder.newLine();
    _builder.append("      ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("or");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("// Case 3: Implicit reference in WHERE clauses without qualifier");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("exists(string whereQuery |");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("whereQuery = queryValue.toString() and");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("whereQuery.regexpMatch(\"(?i).*FROM\\\\s+\" + entity.getName() + \"\\\\b.*\") and");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("whereQuery.regexpMatch(\"(?i).*\\\\bWHERE\\\\b.*\\\\b\" + field.getName() + \"\\\\b.*\") and");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// Ensure it\'s a standalone field name, not part of another identifier");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("whereQuery.regexpMatch(\"(?i).*\\\\b\" + field.getName() + \"\\\\b.*\")");
    _builder.newLine();
    _builder.append("      ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("    ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("  ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/** ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Check if a entity is used in a JPQL query");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("predicate usesOldEntity(Expr queryValue, Class parent) {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("queryValue.toString().regexpMatch(");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("\"(?i).*\\\\b(FROM|UPDATE|DELETE\\\\s+FROM)\\\\s+\" + parent.getName() + \"\\\\b.*\"");
    _builder.newLine();
    _builder.append("  ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("or");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("queryValue.toString().regexpMatch(");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("\"(?i).*\\\\bJOIN\\\\s+(?:FETCH\\\\s+)?\" + parent.getName() + \"\\\\b.*\"");
    _builder.newLine();
    _builder.append("  ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Check if a parent entity is used in a JPQL query");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("predicate usesParentEntity(Expr queryValue, Class parent) {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("queryValue.toString().regexpMatch(");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("\"(?i).*\\\\bSELECT\\\\b.*\\\\bFROM\\\\s+\" + parent.getName() + \"\\\\b.*\"");
    _builder.newLine();
    _builder.append("  ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("or");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("queryValue.toString().regexpMatch(");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("\"(?i).*\\\\bJOIN\\\\s+(?:FETCH\\\\s+)?\" + parent.getName() + \"\\\\b.*\"");
    _builder.newLine();
    _builder.append("  ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/** ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("* Check if the class have the @Inheritance annotation");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("class InheritanceStrategyJOINED extends Annotation {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("InheritanceStrategyJOINED() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("this.getType().hasQualifiedName(\"jakarta.persistence\", \"Inheritance\") and");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("this.getValue(\"strategy\").toString() = \"InheritanceType.JOINED\"");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Check if the child class has a parent with the @Inheritance(strategy = InheritanceType.JOINED) annotation");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("predicate childParentInheritanceWithStrategyJOINED(Class child, Class parent) {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("child.hasName(\"VideoPost\") and parent = child.getASupertype().(Class)");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("and parent.getAnAnnotation() instanceof InheritanceStrategyJOINED");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Check if a field is used in a context that depends on its type");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("predicate usesFieldWithTypeDependency(Expr expr, Field field) {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("// Field is used in a cast expression");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exists(CastExpr cast | cast.getExpr().(FieldAccess).getField() = field) and");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("expr = any(CastExpr c | c.getExpr().(FieldAccess).getField() = field)");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Check if a field is a getter");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("predicate isGetter(Method method, Field field) {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("method.getName() = \"get\" + field.getName().substring(0, 1).toUpperCase() + ");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("field.getName().substring(1, field.getName().length()) and");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("method.getDeclaringType() = field.getDeclaringType()");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Check if a field is a setter");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("predicate isSetter(Method method, Field field) {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("method.getName() = \"set\" + field.getName().substring(0, 1).toUpperCase() + ");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("field.getName().substring(1, field.getName().length()) and");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("method.getDeclaringType() = field.getDeclaringType() and");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("method.getNumberOfParameters() = 1");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Check if a method call is an EntityManager query call");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("predicate isCreateQuery(MethodCall call) {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("call.getMethod().hasQualifiedName(\"jakarta.persistence\", \"EntityManager\", \"createQuery\")");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Check if a method call is an EntityManager named query call");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("predicate isCreateNamedQuery(MethodCall call) {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("call.getMethod().hasQualifiedName(\"jakarta.persistence\", \"EntityManager\", \"createNamedQuery\")");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Check if has a JPA association: OneToOne, OneToMany, ManyToOne, ManyToMany");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("predicate hasJpaAssociationTo(Field field) {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("field.hasAnnotation(\"jakarta.persistence\", \"ManyToOne\") or");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("field.hasAnnotation(\"jakarta.persistence\", \"OneToOne\") or");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("field.hasAnnotation(\"jakarta.persistence\", \"OneToMany\") or");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("field.hasAnnotation(\"jakarta.persistence\", \"ManyToMany\")");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Determine if a field represents a JPA relationship");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("predicate isRelationshipField(Field field) {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("field.hasAnnotation(\"jakarta.persistence\", \"ManyToMany\") ");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* EN: Detects if a field is related to another field through mappedBy");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("predicate isRelatedField(Field relationshipField, Field mappedField) {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exists(Annotation mappedBy |");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("mappedBy = mappedField.getAnAnnotation() and");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("mappedBy.getType().hasQualifiedName(\"jakarta.persistence\", \"ManyToMany\") and");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("mappedBy.getValue(\"mappedBy\").toString().replaceAll(\"\\\"\", \"\") = relationshipField.getName()");
    _builder.newLine();
    _builder.append("  ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Detects if a field is referenced in a JPQL query");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("private predicate fieldReferencedInQuery(Expr queryValue, Class entity, Field field) {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("// with fully qualified entity name");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("queryValue.toString().regexpMatch(\"(?i).*\\\\b\" + entity.getName() + \"\\\\s*\\\\.\\\\s*\" + field.getName() + \"\\\\b.*\")");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("or");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("// with alias");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exists(string alias | ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("queryValue.toString().regexpMatch(\"(?i).*(FROM|JOIN)\\\\s+\" + entity.getName() + \"\\\\s+([a-zA-Z0-9_]+).*\") and");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("alias = queryValue.toString().regexpCapture(\"(?i).*(FROM|JOIN)\\\\s+\" + entity.getName() + \"\\\\s+([a-zA-Z0-9_]+).*\", 2) and");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("queryValue.toString().regexpMatch(\"(?i).*\\\\b\" + alias + \"\\\\s*\\\\.\\\\s*\" + field.getName() + \"\\\\b.*\")");
    _builder.newLine();
    _builder.append("  ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("or");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("// with where");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exists(string whereQuery |");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("whereQuery = queryValue.toString() and");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("whereQuery.regexpMatch(\"(?i).*FROM\\\\s+\" + entity.getName() + \"\\\\b.*\") and");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("whereQuery.regexpMatch(\"(?i).*\\\\bWHERE\\\\b.*\\\\b\" + field.getName() + \"\\\\b.*\") and");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("whereQuery.regexpMatch(\"(?i).*\\\\b\" + field.getName() + \"\\\\b.*\")");
    _builder.newLine();
    _builder.append("  ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Detects if a relationship is used in a JPQL query");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("predicate usesRelationship(Expr queryValue, Field relationshipField) {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("// Direct reference to the main field");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exists(Class entity |");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("entity = relationshipField.getDeclaringType() and");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("fieldReferencedInQuery(queryValue, entity, relationshipField)");
    _builder.newLine();
    _builder.append("  ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("or");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("// References to related fields through mappedBy (in any entity)");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exists(Class entity, Field mappedField |");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("isRelatedField(relationshipField, mappedField) and");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("entity = mappedField.getDeclaringType() and");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("fieldReferencedInQuery(queryValue, entity, mappedField)");
    _builder.newLine();
    _builder.append("  ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Improve the relationship field detection to include both sides of the relationship");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("Field getRelationshipField(Class sourceEntity, string relationshipTableName) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("result = sourceEntity.getAField() and");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("isRelationshipField(result) and");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("exists(Annotation joinTable |");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("hasJoinTableAnnotation(result) and");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("joinTable.getValue(\"name\").toString().replaceAll(\"\\\"\", \"\") = relationshipTableName");
    _builder.newLine();
    _builder.append("    ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Check if a field have the @JoinTable annotation");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("predicate hasJoinTableAnnotation(Field field) {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exists(Annotation joinTable |");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("joinTable = field.getAnAnnotation() and");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("joinTable.getType().hasQualifiedName(\"jakarta.persistence\", \"JoinTable\")");
    _builder.newLine();
    _builder.append("  ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
